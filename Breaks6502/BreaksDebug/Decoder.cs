using System;

namespace BreaksDebug
{
    class DecoderDecoder
    {
        static string[] decoder_out_name = new string[130] {
            "STY (TX)",
            "OP ind, Y (T3)",
            "OP abs, Y (T2)",
            "DEY INY (T0)",
            "TYA (T0)",
            "CPY INY (T0)",

            "OP zpg, X/Y & OP abs, X/Y (T2)",
            "LDX STX A<->X S<->X (TX)",
            "OP ind, X (T2)",
            "TXA (T0)",
            "DEX (T0)",
            "CPX INX (T0)",
            "STX TXA TXS (TX)",
            "TXS (T0)",
            "LDX TAX TSX (T0)",
            "DEX (T1)",
            "INX (T1)",
            "TSX (T0)",
            "DEY INY (T1)",
            "LDY (T0)",
            "LDY TAY (T0)",

            "JSR (T0)",
            "BRK5",
            "Push (T0)",
            "RTS (T4)",
            "Pull (T3)",
            "RTI/5",
            "ROR (TX)",
            "T2",
            "EOR (T0)",
            "JMP (excluder for D31) (TX)",
            "ALU absolute (T2)",
            "ORA (T0)",
            "LEFT_ALL (T2)",
            "T0 ANY",
            "STK2",
            "BRK JSR RTI RTS Push/pull + BIT JMP (T3)",

            "BRK JSR (T4)",
            "RTI (T4)",
            "OP X, ind (T3)",
            "OP ind, Y (T4)",
            "OP ind, Y (T2)",
            "RIGHT ODD (T3)",
            "Pull (TX)",
            "INC NOP (TX)",
            "OP X, ind (T4)",
            "OP ind, Y (T3)",
            "RET (TX)",
            "JSR2",
            "CPY CPX INY INX (T0)",
            "CMP (T0)",
            "SBC0 (T0)",
            "ADC SBC (T0)",
            "ROL (TX)",

            "JMP ind (T3)",
            "ASL ROL (TX)",
            "JSR/5",
            "BRK JSR RTI RTS Push/pull (T2)",
            "TYA (T0)",
            "UPPER ODD (T1)",
            "ADC SBC (T1)",
            "ASL ROL LSR ROR (T1)",
            "TXA (T0)",
            "PLA (T0)",
            "LDA (T0)",
            "ALL ODD (T0)",
            "TAY (T0)",
            "ASL ROL LSR ROR (T0)",
            "TAX (T0)",
            "BIT0",
            "AND0",
            "OP abs,XY (T4)",
            "OP ind,Y (T5)",

            "BR0",
            "PHA (T2)",
            "LSR ROR (T0)",
            "LSR ROR (TX)",
            "BRK (T2)",
            "JSR (T3)",
            "STA (TX)",
            "BR2",
            "zero page (T2)",
            "ALU indirect (T2)",
            "ABS/2",
            "RTS/5",
            "T4 ANY",
            "T3 ANY",
            "BRK RTI (T0)",
            "JMP (T0)",
            "OP X, ind (T5)",
            "RIGHT_ALL (T3)",

            "OP ind, Y (T4)",
            "RIGHT ODD (T3)",
            "BR3",
            "BRK RTI (TX)",
            "JSR (TX)",
            "JMP (TX)",
            "STORE (TX)",
            "BRK (T4)",
            "PHP (T2)",
            "Push (T2)",
            "JMP/4",
            "RTI RTS (T5)",
            "JSR (T5)",

            "JMP abs (T2)",
            "Pull (T3)",
            "LSR ROR DEC INC DEX NOP (4x4 bottom right) (TX)",
            "ASL ROL (TX)",
            "CLI SEI (T0)",
            "BIT (T1)",
            "CLC SEC (T0)",
            "Memory zero page X/Y (T3)",
            "ADC SBC (T1)",
            "BIT (T0)",
            "PLP (T0)",
            "RTI (T4)",
            "CMP (T1)",
            "CPY CPX abs (T1)",
            "ASL ROL (T1)",
            "CPY CPX zpg/immed (T1)",

            "CLD SED (T0)",
            "/IR6",
            "Memory absolute (T3)",
            "Memory zero page (T2)",
            "Memory indirect (T5)",
            "Memory absolute X/Y (T4)",
            "/IR7",
            "CLV",
            "IMPL",
            "pp",
        };

        public static string GetDecoderOutName (int n)
        {
            return decoder_out_name[n];
        }
    }

}
